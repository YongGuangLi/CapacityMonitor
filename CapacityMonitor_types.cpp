/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "CapacityMonitor_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace com { namespace thriftcode {


data_info::~data_info() throw() {
}


void data_info::__set_colNum(const int32_t val) {
  this->colNum = val;
}

void data_info::__set_colName(const std::string& val) {
  this->colName = val;
}

void data_info::__set_minValue(const int32_t val) {
  this->minValue = val;
}

void data_info::__set_maxValue(const int32_t val) {
  this->maxValue = val;
}

uint32_t data_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_colNum = false;
  bool isset_colName = false;
  bool isset_minValue = false;
  bool isset_maxValue = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->colNum);
          isset_colNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->colName);
          isset_colName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minValue);
          isset_minValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxValue);
          isset_maxValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_colNum)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_colName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_minValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t data_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("data_info");

  xfer += oprot->writeFieldBegin("colNum", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->colNum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("colName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->colName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minValue", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->minValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxValue", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->maxValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(data_info &a, data_info &b) {
  using ::std::swap;
  swap(a.colNum, b.colNum);
  swap(a.colName, b.colName);
  swap(a.minValue, b.minValue);
  swap(a.maxValue, b.maxValue);
}

data_info::data_info(const data_info& other0) {
  colNum = other0.colNum;
  colName = other0.colName;
  minValue = other0.minValue;
  maxValue = other0.maxValue;
}
data_info& data_info::operator=(const data_info& other1) {
  colNum = other1.colNum;
  colName = other1.colName;
  minValue = other1.minValue;
  maxValue = other1.maxValue;
  return *this;
}
void data_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "data_info(";
  out << "colNum=" << to_string(colNum);
  out << ", " << "colName=" << to_string(colName);
  out << ", " << "minValue=" << to_string(minValue);
  out << ", " << "maxValue=" << to_string(maxValue);
  out << ")";
}


CalcException::~CalcException() throw() {
}


void CalcException::__set_code(const int32_t val) {
  this->code = val;
__isset.code = true;
}

void CalcException::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

void CalcException::__set_dateTime(const std::string& val) {
  this->dateTime = val;
__isset.dateTime = true;
}

uint32_t CalcException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dateTime);
          this->__isset.dateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CalcException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CalcException");

  if (this->__isset.code) {
    xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->code);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dateTime) {
    xfer += oprot->writeFieldBegin("dateTime", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->dateTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CalcException &a, CalcException &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.message, b.message);
  swap(a.dateTime, b.dateTime);
  swap(a.__isset, b.__isset);
}

CalcException::CalcException(const CalcException& other2) : TException() {
  code = other2.code;
  message = other2.message;
  dateTime = other2.dateTime;
  __isset = other2.__isset;
}
CalcException& CalcException::operator=(const CalcException& other3) {
  code = other3.code;
  message = other3.message;
  dateTime = other3.dateTime;
  __isset = other3.__isset;
  return *this;
}
void CalcException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CalcException(";
  out << "code="; (__isset.code ? (out << to_string(code)) : (out << "<null>"));
  out << ", " << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ", " << "dateTime="; (__isset.dateTime ? (out << to_string(dateTime)) : (out << "<null>"));
  out << ")";
}

const char* CalcException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: CalcException";
  }
}

}} // namespace
