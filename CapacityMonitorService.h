/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CapacityMonitorService_H
#define CapacityMonitorService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "CapacityMonitor_types.h"

namespace com { namespace thriftcode {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CapacityMonitorServiceIf {
 public:
  virtual ~CapacityMonitorServiceIf() {}
  virtual void getLogisticDistributionModel(std::string& _return, const std::vector<double> & list_CNGK_Data) = 0;
  virtual void getWeibullDistributionModel(std::string& _return, const std::vector<double> & list_CNGK_Data) = 0;
  virtual int16_t trainModel(const std::string& modelid, const std::vector<data_info> & list_data_info, const std::vector<double> & list_data) = 0;
  virtual void predict(std::vector<double> & _return, const std::string& modelid, const std::vector<data_info> & list_data_info, const std::vector<double> & list_data) = 0;
};

class CapacityMonitorServiceIfFactory {
 public:
  typedef CapacityMonitorServiceIf Handler;

  virtual ~CapacityMonitorServiceIfFactory() {}

  virtual CapacityMonitorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CapacityMonitorServiceIf* /* handler */) = 0;
};

class CapacityMonitorServiceIfSingletonFactory : virtual public CapacityMonitorServiceIfFactory {
 public:
  CapacityMonitorServiceIfSingletonFactory(const boost::shared_ptr<CapacityMonitorServiceIf>& iface) : iface_(iface) {}
  virtual ~CapacityMonitorServiceIfSingletonFactory() {}

  virtual CapacityMonitorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CapacityMonitorServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<CapacityMonitorServiceIf> iface_;
};

class CapacityMonitorServiceNull : virtual public CapacityMonitorServiceIf {
 public:
  virtual ~CapacityMonitorServiceNull() {}
  void getLogisticDistributionModel(std::string& /* _return */, const std::vector<double> & /* list_CNGK_Data */) {
    return;
  }
  void getWeibullDistributionModel(std::string& /* _return */, const std::vector<double> & /* list_CNGK_Data */) {
    return;
  }
  int16_t trainModel(const std::string& /* modelid */, const std::vector<data_info> & /* list_data_info */, const std::vector<double> & /* list_data */) {
    int16_t _return = 0;
    return _return;
  }
  void predict(std::vector<double> & /* _return */, const std::string& /* modelid */, const std::vector<data_info> & /* list_data_info */, const std::vector<double> & /* list_data */) {
    return;
  }
};


class CapacityMonitorService_getLogisticDistributionModel_args {
 public:

  CapacityMonitorService_getLogisticDistributionModel_args(const CapacityMonitorService_getLogisticDistributionModel_args&);
  CapacityMonitorService_getLogisticDistributionModel_args& operator=(const CapacityMonitorService_getLogisticDistributionModel_args&);
  CapacityMonitorService_getLogisticDistributionModel_args() {
  }

  virtual ~CapacityMonitorService_getLogisticDistributionModel_args() throw();
  std::vector<double>  list_CNGK_Data;

  void __set_list_CNGK_Data(const std::vector<double> & val);

  bool operator == (const CapacityMonitorService_getLogisticDistributionModel_args & rhs) const
  {
    if (!(list_CNGK_Data == rhs.list_CNGK_Data))
      return false;
    return true;
  }
  bool operator != (const CapacityMonitorService_getLogisticDistributionModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CapacityMonitorService_getLogisticDistributionModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CapacityMonitorService_getLogisticDistributionModel_pargs {
 public:


  virtual ~CapacityMonitorService_getLogisticDistributionModel_pargs() throw();
  const std::vector<double> * list_CNGK_Data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CapacityMonitorService_getLogisticDistributionModel_result__isset {
  _CapacityMonitorService_getLogisticDistributionModel_result__isset() : success(false), calcException(false) {}
  bool success :1;
  bool calcException :1;
} _CapacityMonitorService_getLogisticDistributionModel_result__isset;

class CapacityMonitorService_getLogisticDistributionModel_result {
 public:

  CapacityMonitorService_getLogisticDistributionModel_result(const CapacityMonitorService_getLogisticDistributionModel_result&);
  CapacityMonitorService_getLogisticDistributionModel_result& operator=(const CapacityMonitorService_getLogisticDistributionModel_result&);
  CapacityMonitorService_getLogisticDistributionModel_result() : success() {
  }

  virtual ~CapacityMonitorService_getLogisticDistributionModel_result() throw();
  std::string success;
  CalcException calcException;

  _CapacityMonitorService_getLogisticDistributionModel_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_calcException(const CalcException& val);

  bool operator == (const CapacityMonitorService_getLogisticDistributionModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(calcException == rhs.calcException))
      return false;
    return true;
  }
  bool operator != (const CapacityMonitorService_getLogisticDistributionModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CapacityMonitorService_getLogisticDistributionModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CapacityMonitorService_getLogisticDistributionModel_presult__isset {
  _CapacityMonitorService_getLogisticDistributionModel_presult__isset() : success(false), calcException(false) {}
  bool success :1;
  bool calcException :1;
} _CapacityMonitorService_getLogisticDistributionModel_presult__isset;

class CapacityMonitorService_getLogisticDistributionModel_presult {
 public:


  virtual ~CapacityMonitorService_getLogisticDistributionModel_presult() throw();
  std::string* success;
  CalcException calcException;

  _CapacityMonitorService_getLogisticDistributionModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CapacityMonitorService_getWeibullDistributionModel_args {
 public:

  CapacityMonitorService_getWeibullDistributionModel_args(const CapacityMonitorService_getWeibullDistributionModel_args&);
  CapacityMonitorService_getWeibullDistributionModel_args& operator=(const CapacityMonitorService_getWeibullDistributionModel_args&);
  CapacityMonitorService_getWeibullDistributionModel_args() {
  }

  virtual ~CapacityMonitorService_getWeibullDistributionModel_args() throw();
  std::vector<double>  list_CNGK_Data;

  void __set_list_CNGK_Data(const std::vector<double> & val);

  bool operator == (const CapacityMonitorService_getWeibullDistributionModel_args & rhs) const
  {
    if (!(list_CNGK_Data == rhs.list_CNGK_Data))
      return false;
    return true;
  }
  bool operator != (const CapacityMonitorService_getWeibullDistributionModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CapacityMonitorService_getWeibullDistributionModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CapacityMonitorService_getWeibullDistributionModel_pargs {
 public:


  virtual ~CapacityMonitorService_getWeibullDistributionModel_pargs() throw();
  const std::vector<double> * list_CNGK_Data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CapacityMonitorService_getWeibullDistributionModel_result__isset {
  _CapacityMonitorService_getWeibullDistributionModel_result__isset() : success(false), calcException(false) {}
  bool success :1;
  bool calcException :1;
} _CapacityMonitorService_getWeibullDistributionModel_result__isset;

class CapacityMonitorService_getWeibullDistributionModel_result {
 public:

  CapacityMonitorService_getWeibullDistributionModel_result(const CapacityMonitorService_getWeibullDistributionModel_result&);
  CapacityMonitorService_getWeibullDistributionModel_result& operator=(const CapacityMonitorService_getWeibullDistributionModel_result&);
  CapacityMonitorService_getWeibullDistributionModel_result() : success() {
  }

  virtual ~CapacityMonitorService_getWeibullDistributionModel_result() throw();
  std::string success;
  CalcException calcException;

  _CapacityMonitorService_getWeibullDistributionModel_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_calcException(const CalcException& val);

  bool operator == (const CapacityMonitorService_getWeibullDistributionModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(calcException == rhs.calcException))
      return false;
    return true;
  }
  bool operator != (const CapacityMonitorService_getWeibullDistributionModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CapacityMonitorService_getWeibullDistributionModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CapacityMonitorService_getWeibullDistributionModel_presult__isset {
  _CapacityMonitorService_getWeibullDistributionModel_presult__isset() : success(false), calcException(false) {}
  bool success :1;
  bool calcException :1;
} _CapacityMonitorService_getWeibullDistributionModel_presult__isset;

class CapacityMonitorService_getWeibullDistributionModel_presult {
 public:


  virtual ~CapacityMonitorService_getWeibullDistributionModel_presult() throw();
  std::string* success;
  CalcException calcException;

  _CapacityMonitorService_getWeibullDistributionModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CapacityMonitorService_trainModel_args {
 public:

  CapacityMonitorService_trainModel_args(const CapacityMonitorService_trainModel_args&);
  CapacityMonitorService_trainModel_args& operator=(const CapacityMonitorService_trainModel_args&);
  CapacityMonitorService_trainModel_args() : modelid() {
  }

  virtual ~CapacityMonitorService_trainModel_args() throw();
  std::string modelid;
  std::vector<data_info>  list_data_info;
  std::vector<double>  list_data;

  void __set_modelid(const std::string& val);

  void __set_list_data_info(const std::vector<data_info> & val);

  void __set_list_data(const std::vector<double> & val);

  bool operator == (const CapacityMonitorService_trainModel_args & rhs) const
  {
    if (!(modelid == rhs.modelid))
      return false;
    if (!(list_data_info == rhs.list_data_info))
      return false;
    if (!(list_data == rhs.list_data))
      return false;
    return true;
  }
  bool operator != (const CapacityMonitorService_trainModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CapacityMonitorService_trainModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CapacityMonitorService_trainModel_pargs {
 public:


  virtual ~CapacityMonitorService_trainModel_pargs() throw();
  const std::string* modelid;
  const std::vector<data_info> * list_data_info;
  const std::vector<double> * list_data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CapacityMonitorService_trainModel_result__isset {
  _CapacityMonitorService_trainModel_result__isset() : success(false), calcException(false) {}
  bool success :1;
  bool calcException :1;
} _CapacityMonitorService_trainModel_result__isset;

class CapacityMonitorService_trainModel_result {
 public:

  CapacityMonitorService_trainModel_result(const CapacityMonitorService_trainModel_result&);
  CapacityMonitorService_trainModel_result& operator=(const CapacityMonitorService_trainModel_result&);
  CapacityMonitorService_trainModel_result() : success(0) {
  }

  virtual ~CapacityMonitorService_trainModel_result() throw();
  int16_t success;
  CalcException calcException;

  _CapacityMonitorService_trainModel_result__isset __isset;

  void __set_success(const int16_t val);

  void __set_calcException(const CalcException& val);

  bool operator == (const CapacityMonitorService_trainModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(calcException == rhs.calcException))
      return false;
    return true;
  }
  bool operator != (const CapacityMonitorService_trainModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CapacityMonitorService_trainModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CapacityMonitorService_trainModel_presult__isset {
  _CapacityMonitorService_trainModel_presult__isset() : success(false), calcException(false) {}
  bool success :1;
  bool calcException :1;
} _CapacityMonitorService_trainModel_presult__isset;

class CapacityMonitorService_trainModel_presult {
 public:


  virtual ~CapacityMonitorService_trainModel_presult() throw();
  int16_t* success;
  CalcException calcException;

  _CapacityMonitorService_trainModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CapacityMonitorService_predict_args {
 public:

  CapacityMonitorService_predict_args(const CapacityMonitorService_predict_args&);
  CapacityMonitorService_predict_args& operator=(const CapacityMonitorService_predict_args&);
  CapacityMonitorService_predict_args() : modelid() {
  }

  virtual ~CapacityMonitorService_predict_args() throw();
  std::string modelid;
  std::vector<data_info>  list_data_info;
  std::vector<double>  list_data;

  void __set_modelid(const std::string& val);

  void __set_list_data_info(const std::vector<data_info> & val);

  void __set_list_data(const std::vector<double> & val);

  bool operator == (const CapacityMonitorService_predict_args & rhs) const
  {
    if (!(modelid == rhs.modelid))
      return false;
    if (!(list_data_info == rhs.list_data_info))
      return false;
    if (!(list_data == rhs.list_data))
      return false;
    return true;
  }
  bool operator != (const CapacityMonitorService_predict_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CapacityMonitorService_predict_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CapacityMonitorService_predict_pargs {
 public:


  virtual ~CapacityMonitorService_predict_pargs() throw();
  const std::string* modelid;
  const std::vector<data_info> * list_data_info;
  const std::vector<double> * list_data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CapacityMonitorService_predict_result__isset {
  _CapacityMonitorService_predict_result__isset() : success(false), calcException(false) {}
  bool success :1;
  bool calcException :1;
} _CapacityMonitorService_predict_result__isset;

class CapacityMonitorService_predict_result {
 public:

  CapacityMonitorService_predict_result(const CapacityMonitorService_predict_result&);
  CapacityMonitorService_predict_result& operator=(const CapacityMonitorService_predict_result&);
  CapacityMonitorService_predict_result() {
  }

  virtual ~CapacityMonitorService_predict_result() throw();
  std::vector<double>  success;
  CalcException calcException;

  _CapacityMonitorService_predict_result__isset __isset;

  void __set_success(const std::vector<double> & val);

  void __set_calcException(const CalcException& val);

  bool operator == (const CapacityMonitorService_predict_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(calcException == rhs.calcException))
      return false;
    return true;
  }
  bool operator != (const CapacityMonitorService_predict_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CapacityMonitorService_predict_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CapacityMonitorService_predict_presult__isset {
  _CapacityMonitorService_predict_presult__isset() : success(false), calcException(false) {}
  bool success :1;
  bool calcException :1;
} _CapacityMonitorService_predict_presult__isset;

class CapacityMonitorService_predict_presult {
 public:


  virtual ~CapacityMonitorService_predict_presult() throw();
  std::vector<double> * success;
  CalcException calcException;

  _CapacityMonitorService_predict_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CapacityMonitorServiceClient : virtual public CapacityMonitorServiceIf {
 public:
  CapacityMonitorServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CapacityMonitorServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getLogisticDistributionModel(std::string& _return, const std::vector<double> & list_CNGK_Data);
  void send_getLogisticDistributionModel(const std::vector<double> & list_CNGK_Data);
  void recv_getLogisticDistributionModel(std::string& _return);
  void getWeibullDistributionModel(std::string& _return, const std::vector<double> & list_CNGK_Data);
  void send_getWeibullDistributionModel(const std::vector<double> & list_CNGK_Data);
  void recv_getWeibullDistributionModel(std::string& _return);
  int16_t trainModel(const std::string& modelid, const std::vector<data_info> & list_data_info, const std::vector<double> & list_data);
  void send_trainModel(const std::string& modelid, const std::vector<data_info> & list_data_info, const std::vector<double> & list_data);
  int16_t recv_trainModel();
  void predict(std::vector<double> & _return, const std::string& modelid, const std::vector<data_info> & list_data_info, const std::vector<double> & list_data);
  void send_predict(const std::string& modelid, const std::vector<data_info> & list_data_info, const std::vector<double> & list_data);
  void recv_predict(std::vector<double> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CapacityMonitorServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CapacityMonitorServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CapacityMonitorServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getLogisticDistributionModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getWeibullDistributionModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_trainModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_predict(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CapacityMonitorServiceProcessor(boost::shared_ptr<CapacityMonitorServiceIf> iface) :
    iface_(iface) {
    processMap_["getLogisticDistributionModel"] = &CapacityMonitorServiceProcessor::process_getLogisticDistributionModel;
    processMap_["getWeibullDistributionModel"] = &CapacityMonitorServiceProcessor::process_getWeibullDistributionModel;
    processMap_["trainModel"] = &CapacityMonitorServiceProcessor::process_trainModel;
    processMap_["predict"] = &CapacityMonitorServiceProcessor::process_predict;
  }

  virtual ~CapacityMonitorServiceProcessor() {}
};

class CapacityMonitorServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CapacityMonitorServiceProcessorFactory(const ::boost::shared_ptr< CapacityMonitorServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CapacityMonitorServiceIfFactory > handlerFactory_;
};

class CapacityMonitorServiceMultiface : virtual public CapacityMonitorServiceIf {
 public:
  CapacityMonitorServiceMultiface(std::vector<boost::shared_ptr<CapacityMonitorServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CapacityMonitorServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CapacityMonitorServiceIf> > ifaces_;
  CapacityMonitorServiceMultiface() {}
  void add(boost::shared_ptr<CapacityMonitorServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getLogisticDistributionModel(std::string& _return, const std::vector<double> & list_CNGK_Data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLogisticDistributionModel(_return, list_CNGK_Data);
    }
    ifaces_[i]->getLogisticDistributionModel(_return, list_CNGK_Data);
    return;
  }

  void getWeibullDistributionModel(std::string& _return, const std::vector<double> & list_CNGK_Data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getWeibullDistributionModel(_return, list_CNGK_Data);
    }
    ifaces_[i]->getWeibullDistributionModel(_return, list_CNGK_Data);
    return;
  }

  int16_t trainModel(const std::string& modelid, const std::vector<data_info> & list_data_info, const std::vector<double> & list_data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->trainModel(modelid, list_data_info, list_data);
    }
    return ifaces_[i]->trainModel(modelid, list_data_info, list_data);
  }

  void predict(std::vector<double> & _return, const std::string& modelid, const std::vector<data_info> & list_data_info, const std::vector<double> & list_data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->predict(_return, modelid, list_data_info, list_data);
    }
    ifaces_[i]->predict(_return, modelid, list_data_info, list_data);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CapacityMonitorServiceConcurrentClient : virtual public CapacityMonitorServiceIf {
 public:
  CapacityMonitorServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CapacityMonitorServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getLogisticDistributionModel(std::string& _return, const std::vector<double> & list_CNGK_Data);
  int32_t send_getLogisticDistributionModel(const std::vector<double> & list_CNGK_Data);
  void recv_getLogisticDistributionModel(std::string& _return, const int32_t seqid);
  void getWeibullDistributionModel(std::string& _return, const std::vector<double> & list_CNGK_Data);
  int32_t send_getWeibullDistributionModel(const std::vector<double> & list_CNGK_Data);
  void recv_getWeibullDistributionModel(std::string& _return, const int32_t seqid);
  int16_t trainModel(const std::string& modelid, const std::vector<data_info> & list_data_info, const std::vector<double> & list_data);
  int32_t send_trainModel(const std::string& modelid, const std::vector<data_info> & list_data_info, const std::vector<double> & list_data);
  int16_t recv_trainModel(const int32_t seqid);
  void predict(std::vector<double> & _return, const std::string& modelid, const std::vector<data_info> & list_data_info, const std::vector<double> & list_data);
  int32_t send_predict(const std::string& modelid, const std::vector<data_info> & list_data_info, const std::vector<double> & list_data);
  void recv_predict(std::vector<double> & _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}} // namespace

#endif
